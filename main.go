package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type Pomodoro struct {
	Pause    bool          `json:"pause"`
	IsWork   bool          `json:"is_work"`
	CurrTime time.Duration `json:"curr_time"`
}

var work time.Duration = 25 * time.Minute
var chill time.Duration = 5 * time.Minute

var pomo = Pomodoro{
	Pause:    true,
	IsWork:   true,
	CurrTime: work,
}

func ToggleHandler(w http.ResponseWriter, r *http.Request) {
	pomo.Pause = !pomo.Pause
}

func ResetHandler(w http.ResponseWriter, r *http.Request) {
	pomo.Pause = true
	pomo.IsWork = true
	pomo.CurrTime = work
}

func StatusHandler(w http.ResponseWriter, r *http.Request) {
	minutes := int(pomo.CurrTime.Minutes())
	seconds := int(pomo.CurrTime.Seconds()) % 60

	response := map[string]string{
		"text": fmt.Sprintf("üçÖ %02d:%02d", minutes, seconds),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func StartTimer() {
	ticker := time.NewTicker(1 * time.Second) // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–∏–∫–µ—Ä –≤–º–µ—Å—Ç–æ sleep
	defer ticker.Stop()

	for range ticker.C {
		if !pomo.Pause {
			if pomo.CurrTime > 0 {
				pomo.CurrTime -= time.Second
			}

			// –¢–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è
			if pomo.CurrTime <= 0 {
				if pomo.IsWork {
					// –†–∞–±–æ—Ç–∞ ‚Üí –ü–µ—Ä–µ—Ä—ã–≤
					pomo.IsWork = false
					pomo.CurrTime = chill
					pomo.Pause = true // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
					fmt.Println("üéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞")
				} else {
					// –ü–µ—Ä–µ—Ä—ã–≤ ‚Üí –†–∞–±–æ—Ç–∞
					pomo.IsWork = true
					pomo.CurrTime = work
					pomo.Pause = true // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
					fmt.Println("üí™ –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å")
				}
			}
		}
	}
}

func main() {
	go StartTimer()

	mux := http.NewServeMux()
	mux.HandleFunc("/toggle", ToggleHandler)
	mux.HandleFunc("/reset", ResetHandler)
	mux.HandleFunc("/status", StatusHandler)

	fmt.Println("Started on http://localhost:8081")
	err := http.ListenAndServe(":8081", mux)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
	}
}
